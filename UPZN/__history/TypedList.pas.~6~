unit TypedList;

interface

type
  // Базовый класс для типизированного списка
  TTypedList = class
  protected
    FItemSize: Integer;
    FItems: array of Pointer;
    FCount: Integer;
    procedure SetCapacity(NewCapacity: Integer);
    function Get(Index: Integer): Pointer;
  public
    constructor Create(ItemSize: Integer);
    destructor Destroy; override;

    procedure Clear;
    procedure Delete(Index: Integer);
    function Add(Item: Pointer): Integer;
    procedure Insert(Index: Integer; Item: Pointer);

    property Count: Integer read FCount;
    property ItemSize: Integer read FItemSize;
  end;

  // Типизированная обёртка
  TGenericList<T> = class(TTypedList)
  private
    function GetItem(Index: Integer): T;
    procedure SetItem(Index: Integer; const Value: T);
  public
    constructor Create;
    procedure AddItem(const Value: T);
    procedure InsertItem(Index: Integer; const Value: T);

    property Items[Index: Integer]: T read GetItem write SetItem; default;
  end;

implementation

{ TTypedList }

constructor TTypedList.Create(ItemSize: Integer);
begin
  inherited Create;
  FItemSize := ItemSize;
  FCount := 0;
  SetCapacity(4);
end;

destructor TTypedList.Destroy;
begin
  Clear;
  inherited;
end;

procedure TTypedList.Clear;
var
  I: Integer;
begin
  for I := 0 to FCount - 1 do
    FreeMem(FItems[I]);
  FCount := 0;
  SetCapacity(0);
end;

function TTypedList.Add(Item: Pointer): Integer;
begin
  Result := FCount;
  if FCount = Length(FItems) then
    SetCapacity(FCount + FCount div 4 + 4);

  GetMem(FItems[FCount], FItemSize);
  Move(Item^, FItems[FCount]^, FItemSize);
  Inc(FCount);
end;

procedure TTypedList.Insert(Index: Integer; Item: Pointer);
begin
  if (Index < 0) or (Index > FCount) then
    raise Exception.Create('Index out of bounds');

  if FCount = Length(FItems) then
    SetCapacity(FCount + FCount div 4 + 4);

  if Index < FCount then
    Move(FItems[Index], FItems[Index + 1], (FCount - Index) * SizeOf(Pointer));

  GetMem(FItems[Index], FItemSize);
  Move(Item^, FItems[Index]^, FItemSize);
  Inc(FCount);
end;

// Остальные методы TTypedList...

{ TGenericList<T> }

constructor TGenericList<T>.Create;
begin
  inherited Create(SizeOf(T));
end;

procedure TGenericList<T>.AddItem(const Value: T);
begin
  Add(@Value);
end;

function TGenericList<T>.GetItem(Index: Integer): T;
begin
  if (Index < 0) or (Index >= FCount) then
    raise Exception.Create('Index out of bounds');

  Result := T(FItems[Index]^);
end;

procedure TGenericList<T>.SetItem(Index: Integer; const Value: T);
begin
  if (Index < 0) or (Index >= FCount) then
    raise Exception.Create('Index out of bounds');

  Move(Value, FItems[Index]^, FItemSize);
end;

procedure TGenericList<T>.InsertItem(Index: Integer; const Value: T);
begin
  Insert(Index, @Value);
end;

end.
